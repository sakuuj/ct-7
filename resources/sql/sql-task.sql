--1. 
select a.aircraft_code, s.fare_conditions, count(*)
	from aircrafts a join seats s on a.aircraft_code = s.aircraft_code
	group by a.aircraft_code, s.fare_conditions
	order by a.aircraft_code, s.fare_conditions;


--2.
select distinct a.model, count(s.seat_no) from aircrafts a join seats s on a.aircraft_code = s.aircraft_code 
	group by a.model, a.aircraft_code
	order by count(s.seat_no) DESC limit 3;

	
--3.
select 
	f.flight_id,
	f.scheduled_arrival, 
	f.actual_arrival, 
	f.actual_arrival - f.scheduled_arrival as delay
from flights f 
	where 
		(f.actual_arrival - f.scheduled_arrival) > '02:00:00'
order by delay;


--4.
select 
	t.ticket_no, t.passenger_name, t.contact_data, b.book_date, tf.fare_conditions  
from 
	tickets t join bookings b 
		on t.book_ref = b.book_ref
	join ticket_flights tf 
		on t.ticket_no = tf.ticket_no and tf.fare_conditions = 'Business'
	order by b.book_date desc limit 10;

	
--5.
select 
	 f.flight_id
from 
	flights f left join ticket_flights tf 
		on f.flight_id  = tf.flight_id and tf.fare_conditions = 'Business'
	group by f.flight_id having count(tf.ticket_no) = 0;

	
--6.
select distinct 
	a.airport_code, a.airport_name, a.city 
from 
	airports a join flights f 
		on f.arrival_airport = a.airport_code 
			and f.status = 'Delayed'
order by a.city;


--7.
select
	a.airport_name, count(f.flight_id)
from 
	airports a join flights f 
		on f.arrival_airport = a.airport_code
	group by a.airport_name 
order by count(f.flight_id) desc;


--8.
select f.flight_id, f.scheduled_arrival, f.actual_arrival 
	from flights f 
	where f.scheduled_arrival != f.actual_arrival;
	

--9.
select 
	a.aircraft_code, a.model, s.seat_no, s.fare_conditions 
from 
	aircrafts a join seats s 
	on a.model = 'Аэробус A321-200'
		and s.aircraft_code = a.aircraft_code 
		and s.fare_conditions != 'Economy'
order by s.seat_no;


--10.
select a0.airport_code, a0.airport_name, a0.city 
	from airports a0 
	join
		(select a.city as city
		from airports a 
		group by a.city 
		having (count(a.airport_code) > 1)) 
		as c
	on a0.city  = c.city;
	
--или

select a.airport_code, a.airport_name, a.city
	from airports a
	where 1 < (select count(a2.airport_code) 
		from airports a2
		where a2.city = a.city
		group by a2.city);
		
		
--11.
select 
	t.passenger_id, 
	t.passenger_name, 
	sum(b.total_amount) as passenger_sum, 
	(select avg(total_amount) from bookings b2) as avg_sum
	from tickets t join bookings b
	on t.book_ref = b.book_ref
	group by t.passenger_id, t.passenger_name
	having sum(b.total_amount) > (select avg(total_amount) from bookings b2);
	
	
--12.
select 
	f as the_closest_flight_from_ekatirenburg_to_moscow,
	a_dep.city as departure_city, 
	a_arr.city as arrival_city 
	from
	flights f join airports a_dep 
		on f.departure_airport = a_dep.airport_code
			and a_dep.city = 'Екатеринбург'
			and f.status in ('Delayed', 'On Time', 'Scheduled')
	join airports a_arr
		on f.arrival_airport = a_arr.airport_code 
			and a_arr.city = 'Москва'
	order by f.scheduled_departure limit 1;


--13.
select 
	(select tf_expensive as the_most_expensive_ticket
	from ticket_flights tf_expensive join 
		(select max(tf_max.amount) as amount
		from ticket_flights tf_max) as max_amount
	on tf_expensive.amount = max_amount.amount limit 1) as the_most_expensive_ticket,
	(select tf_cheap as the_cheapest_ticket
		from ticket_flights tf_cheap join 
			(select min(tf_min.amount) as amount
			from ticket_flights tf_min) as min_amount
		on tf_cheap.amount = min_amount.amount limit 1) as the_cheapest_ticket;
		
		
--14.
create table Customers (
	id bigint generated by default as identity not null,
	firstName varchar(50) not null,
	LastName varchar(80) not null,
	email varchar(60) not null,
	phone varchar(30) not null,
	
	primary key(id),
	check(LENGTH(firstName) > 0),
	check(LENGTH(LastName) > 0),
	check(email ~* '^[A-Za-z0-9_]+@[A-Za-z0-9_]+\.[A-Za-z]+$'),
	check(phone ~* '^\+7-\d{3}-\d{3}-\d{2}-\d{2}$')
);


--15.
create table Orders (
	id bigint generated by default as identity not null,
	customerId bigint not null,
	quantity bigint not null,
	
	primary key(id),
	foreign key(customerId) references Customers(id),
	check(quantity >= 0)
);


--16.
insert into Customers(firstName, LastName, email, phone)
values
('Иван', 'Иванов','ivan_ov@gmail.com', '+7-834-213-23-11'),
('Иван', 'Иванович','ivxcxx@yandex.ru', '+7-834-213-23-22'),
('Иван', 'Ивановский','izzzz@yandex.by', '+7-834-213-23-33'),
('Иван', 'Ивановий','ivashka@alfabank.ru', '+7-834-213-23-44'),
('Иван', 'Ивановьев','ivrit@mail.ru', '+7-834-213-23-55');

insert into Orders(customerId, quantity)
values
(1, 10),
(2, 4),
(2, 6),
(4, 99),
(5, 9);


--17.
drop table Orders;
drop table Customers;
